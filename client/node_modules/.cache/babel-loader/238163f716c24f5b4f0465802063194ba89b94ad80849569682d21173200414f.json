{"ast":null,"code":"import axios from \"axios\";\nimport { serverPort } from \"../const\";\nconst $host = axios.create({\n  baseURL: serverPort\n});\nexport const reserveFunction = async (fio, number, places) => {\n  const {\n    data\n  } = await $host.post('/api/booking/postBooking', {\n    fio,\n    number,\n    places\n  });\n  return data;\n};\nexport const orderFunction = async (fio, number, order) => {\n  const {\n    data\n  } = await $host.post('/api/order/addOrder', {\n    fio,\n    number,\n    order\n  });\n  return data;\n};\nexport const updatePhonedFunction = async id_booking => {\n  const {\n    data\n  } = await $host.post('/api/booking/updatePhoned', {\n    id_booking\n  });\n  return data;\n};\nexport const updateBookingFunction = async id_booking => {\n  const {\n    data\n  } = await $host.post('/api/booking/updateBooking', {\n    id_booking\n  });\n  return data;\n};\nexport const updatePhonedOrderFunction = async id_order => {\n  const {\n    data\n  } = await $host.post('/api/order/updatePhoned', {\n    id_order\n  });\n  return data;\n};\nexport const updateOrderingFunction = async id_order => {\n  const {\n    data\n  } = await $host.post('/api/order/updateOrdering', {\n    id_order\n  });\n  return data;\n};\nexport const addPostFunction = async formdata => {\n  const {\n    data\n  } = await $host.post('/api/post/addPost', formdata);\n  return data;\n};\nexport const getAllPosts = async () => {\n  const {\n    data\n  } = await $host.get('/api/post/getPosts');\n  return data;\n};\nexport const authFunction = async (admin, password) => {\n  const {\n    data\n  } = await $host.post('/api/admin/checkAdmin', {\n    admin,\n    password\n  });\n  if (data[0] === true) {\n    localStorage.setItem(\"token\", data[1].token);\n    return true;\n  } else {\n    alert(\"Не правильный логин или пароль\");\n    return false;\n  }\n};","map":{"version":3,"names":["axios","serverPort","$host","create","baseURL","reserveFunction","fio","number","places","data","post","orderFunction","order","updatePhonedFunction","id_booking","updateBookingFunction","updatePhonedOrderFunction","id_order","updateOrderingFunction","addPostFunction","formdata","getAllPosts","get","authFunction","admin","password","localStorage","setItem","token","alert"],"sources":["C:/Users/KittyBonny/Documents/GitHub/Diplom/client/src/queries/mainQuery.js"],"sourcesContent":["import axios from \"axios\"\nimport { serverPort } from \"../const\"\n\nconst $host = axios.create({\n\tbaseURL: serverPort\n})\n\nexport const reserveFunction = async (fio, number, places) => {\n    const {data} = await $host.post('/api/booking/postBooking', {fio, number, places})\n    return data\n}\n\nexport const orderFunction = async (fio, number, order) => {\n    const {data} = await $host.post('/api/order/addOrder', {fio, number, order})\n    return data\n}\n\nexport const updatePhonedFunction = async (id_booking) => {\n    const {data} = await $host.post('/api/booking/updatePhoned', { id_booking })\n    return data\n}\n\nexport const updateBookingFunction = async (id_booking) => {\n    const {data} = await $host.post('/api/booking/updateBooking', {id_booking})\n    return data\n}\n\nexport const updatePhonedOrderFunction = async (id_order) => {\n    const {data} = await $host.post('/api/order/updatePhoned', {id_order})\n    return data\n}\n\nexport const updateOrderingFunction = async (id_order) => {\n    const {data} = await $host.post('/api/order/updateOrdering', {id_order})\n    return data\n}\n\nexport const addPostFunction = async (formdata) => {\n    const {data} = await $host.post('/api/post/addPost', formdata)\n    return data\n}\n\nexport const getAllPosts = async () => {\n    const {data} = await $host.get('/api/post/getPosts')\n    return data\n}\n\nexport const authFunction = async (admin, password) => {\n    const {data} = await $host.post('/api/admin/checkAdmin', {admin, password})\n    if(data[0] === true) {\n\t\tlocalStorage.setItem(\"token\", data[1].token)\n\t\treturn true\n\t}else{\n\t\talert(\"Не правильный логин или пароль\")\n\t\treturn false\n\t}\n}"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,SAASC,UAAU,QAAQ,UAAU;AAErC,MAAMC,KAAK,GAAGF,KAAK,CAACG,MAAM,CAAC;EAC1BC,OAAO,EAAEH;AACV,CAAC,CAAC;AAEF,OAAO,MAAMI,eAAe,GAAG,MAAAA,CAAOC,GAAG,EAAEC,MAAM,EAAEC,MAAM,KAAK;EAC1D,MAAM;IAACC;EAAI,CAAC,GAAG,MAAMP,KAAK,CAACQ,IAAI,CAAC,0BAA0B,EAAE;IAACJ,GAAG;IAAEC,MAAM;IAAEC;EAAM,CAAC,CAAC;EAClF,OAAOC,IAAI;AACf,CAAC;AAED,OAAO,MAAME,aAAa,GAAG,MAAAA,CAAOL,GAAG,EAAEC,MAAM,EAAEK,KAAK,KAAK;EACvD,MAAM;IAACH;EAAI,CAAC,GAAG,MAAMP,KAAK,CAACQ,IAAI,CAAC,qBAAqB,EAAE;IAACJ,GAAG;IAAEC,MAAM;IAAEK;EAAK,CAAC,CAAC;EAC5E,OAAOH,IAAI;AACf,CAAC;AAED,OAAO,MAAMI,oBAAoB,GAAG,MAAOC,UAAU,IAAK;EACtD,MAAM;IAACL;EAAI,CAAC,GAAG,MAAMP,KAAK,CAACQ,IAAI,CAAC,2BAA2B,EAAE;IAAEI;EAAW,CAAC,CAAC;EAC5E,OAAOL,IAAI;AACf,CAAC;AAED,OAAO,MAAMM,qBAAqB,GAAG,MAAOD,UAAU,IAAK;EACvD,MAAM;IAACL;EAAI,CAAC,GAAG,MAAMP,KAAK,CAACQ,IAAI,CAAC,4BAA4B,EAAE;IAACI;EAAU,CAAC,CAAC;EAC3E,OAAOL,IAAI;AACf,CAAC;AAED,OAAO,MAAMO,yBAAyB,GAAG,MAAOC,QAAQ,IAAK;EACzD,MAAM;IAACR;EAAI,CAAC,GAAG,MAAMP,KAAK,CAACQ,IAAI,CAAC,yBAAyB,EAAE;IAACO;EAAQ,CAAC,CAAC;EACtE,OAAOR,IAAI;AACf,CAAC;AAED,OAAO,MAAMS,sBAAsB,GAAG,MAAOD,QAAQ,IAAK;EACtD,MAAM;IAACR;EAAI,CAAC,GAAG,MAAMP,KAAK,CAACQ,IAAI,CAAC,2BAA2B,EAAE;IAACO;EAAQ,CAAC,CAAC;EACxE,OAAOR,IAAI;AACf,CAAC;AAED,OAAO,MAAMU,eAAe,GAAG,MAAOC,QAAQ,IAAK;EAC/C,MAAM;IAACX;EAAI,CAAC,GAAG,MAAMP,KAAK,CAACQ,IAAI,CAAC,mBAAmB,EAAEU,QAAQ,CAAC;EAC9D,OAAOX,IAAI;AACf,CAAC;AAED,OAAO,MAAMY,WAAW,GAAG,MAAAA,CAAA,KAAY;EACnC,MAAM;IAACZ;EAAI,CAAC,GAAG,MAAMP,KAAK,CAACoB,GAAG,CAAC,oBAAoB,CAAC;EACpD,OAAOb,IAAI;AACf,CAAC;AAED,OAAO,MAAMc,YAAY,GAAG,MAAAA,CAAOC,KAAK,EAAEC,QAAQ,KAAK;EACnD,MAAM;IAAChB;EAAI,CAAC,GAAG,MAAMP,KAAK,CAACQ,IAAI,CAAC,uBAAuB,EAAE;IAACc,KAAK;IAAEC;EAAQ,CAAC,CAAC;EAC3E,IAAGhB,IAAI,CAAC,CAAC,CAAC,KAAK,IAAI,EAAE;IACvBiB,YAAY,CAACC,OAAO,CAAC,OAAO,EAAElB,IAAI,CAAC,CAAC,CAAC,CAACmB,KAAK,CAAC;IAC5C,OAAO,IAAI;EACZ,CAAC,MAAI;IACJC,KAAK,CAAC,gCAAgC,CAAC;IACvC,OAAO,KAAK;EACb;AACD,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}