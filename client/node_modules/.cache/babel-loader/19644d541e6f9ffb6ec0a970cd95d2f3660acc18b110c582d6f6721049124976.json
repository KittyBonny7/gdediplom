{"ast":null,"code":"import axios from \"axios\";\nimport jwtDecode from \"jwt-decode\";\nimport { serverPort } from \"../const\";\nconst $host = axios.create({\n  baseURL: serverPort\n});\nexport const registration = async (name, surname, email, login, password) => {\n  // Проверка наличия логина или почты на сервере\n  const {\n    data\n  } = await $host.get(\"/check-user\", {\n    params: {\n      login,\n      email\n    }\n  });\n  if (data.isExist) {\n    alert(\"Пользователь с такой почтой или логином уже зарегистрирован\");\n    return null;\n  }\n\n  // Регистрация нового пользователя\n  const response = await $host.post(\"/registration\", {\n    name,\n    surname,\n    email,\n    login,\n    password\n  });\n\n  // Обработка успешной регистрации\n  if (response.status === 200) {\n    const token = response.data.token;\n    localStorage.setItem(\"token\", token);\n    return jwtDecode(token);\n  } else {\n    alert(\"Пользователь с такой почтой или логином уже зарегистрирован\");\n  }\n};\n\n// mifon\n// export const registration = async (name, surname, email, login, password) => {\n// \tconst {data} = await $host.post(\"/registration\", {name, surname, email, login, password})\n// \tif(data[0] === true) {\n// \t\tlocalStorage.setItem(\"token\", data[1].token)\n// \t\treturn jwtDecode(data[1].token)\n// \t}else{\n// \t\talert(\"Пользователь с такой почтой или логином уже зарегистрирован\")\n// \t}\n// }\n\nexport const authUser = async (login, password) => {\n  const {\n    data\n  } = await $host.post(\"/auth\", {\n    login,\n    password\n  });\n  if (data[0] === true) {\n    localStorage.setItem(\"token\", data[1].token);\n    return true;\n  } else {\n    alert(\"Не правильный логин или пароль\");\n    return false;\n  }\n};","map":{"version":3,"names":["axios","jwtDecode","serverPort","$host","create","baseURL","registration","name","surname","email","login","password","data","get","params","isExist","alert","response","post","status","token","localStorage","setItem","authUser"],"sources":["C:/Users/KittyBonny/Documents/GitHub/Diplom/client/src/queries/mainQuery.js"],"sourcesContent":["import axios from \"axios\"\nimport jwtDecode from \"jwt-decode\"\nimport { serverPort } from \"../const\"\n\nconst $host = axios.create({\n\tbaseURL: serverPort\n})\n\n\nexport const registration = async (name, surname, email, login, password) => {\n\t// Проверка наличия логина или почты на сервере\n\tconst { data } = await $host.get(\"/check-user\", { params: { login, email } });\n\t\n\tif (data.isExist) {\n\t  alert(\"Пользователь с такой почтой или логином уже зарегистрирован\");\n\t  return null;\n\t}\n  \n\t// Регистрация нового пользователя\n\tconst response = await $host.post(\"/registration\", { name, surname, email, login, password });\n\t\n\t// Обработка успешной регистрации\n\tif (response.status === 200) {\n\t  const token = response.data.token;\n\t  localStorage.setItem(\"token\", token);\n\t  return jwtDecode(token);\n\t} else {\n\t\talert(\"Пользователь с такой почтой или логином уже зарегистрирован\")\n\t}\n  };\n  \n// mifon\n// export const registration = async (name, surname, email, login, password) => {\n// \tconst {data} = await $host.post(\"/registration\", {name, surname, email, login, password})\n// \tif(data[0] === true) {\n// \t\tlocalStorage.setItem(\"token\", data[1].token)\n// \t\treturn jwtDecode(data[1].token)\n// \t}else{\n// \t\talert(\"Пользователь с такой почтой или логином уже зарегистрирован\")\n// \t}\n// }\n\n\nexport const authUser =  async (login, password) => {\n\tconst {data} = await $host.post(\"/auth\", {login, password})\n\tif(data[0] === true) {\n\t\tlocalStorage.setItem(\"token\", data[1].token)\n\t\treturn true\n\t}else{\n\t\talert(\"Не правильный логин или пароль\")\n\t\treturn false\n\t}\n}"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,OAAOC,SAAS,MAAM,YAAY;AAClC,SAASC,UAAU,QAAQ,UAAU;AAErC,MAAMC,KAAK,GAAGH,KAAK,CAACI,MAAM,CAAC;EAC1BC,OAAO,EAAEH;AACV,CAAC,CAAC;AAGF,OAAO,MAAMI,YAAY,GAAG,MAAAA,CAAOC,IAAI,EAAEC,OAAO,EAAEC,KAAK,EAAEC,KAAK,EAAEC,QAAQ,KAAK;EAC5E;EACA,MAAM;IAAEC;EAAK,CAAC,GAAG,MAAMT,KAAK,CAACU,GAAG,CAAC,aAAa,EAAE;IAAEC,MAAM,EAAE;MAAEJ,KAAK;MAAED;IAAM;EAAE,CAAC,CAAC;EAE7E,IAAIG,IAAI,CAACG,OAAO,EAAE;IAChBC,KAAK,CAAC,6DAA6D,CAAC;IACpE,OAAO,IAAI;EACb;;EAEA;EACA,MAAMC,QAAQ,GAAG,MAAMd,KAAK,CAACe,IAAI,CAAC,eAAe,EAAE;IAAEX,IAAI;IAAEC,OAAO;IAAEC,KAAK;IAAEC,KAAK;IAAEC;EAAS,CAAC,CAAC;;EAE7F;EACA,IAAIM,QAAQ,CAACE,MAAM,KAAK,GAAG,EAAE;IAC3B,MAAMC,KAAK,GAAGH,QAAQ,CAACL,IAAI,CAACQ,KAAK;IACjCC,YAAY,CAACC,OAAO,CAAC,OAAO,EAAEF,KAAK,CAAC;IACpC,OAAOnB,SAAS,CAACmB,KAAK,CAAC;EACzB,CAAC,MAAM;IACNJ,KAAK,CAAC,6DAA6D,CAAC;EACrE;AACC,CAAC;;AAEH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA,OAAO,MAAMO,QAAQ,GAAI,MAAAA,CAAOb,KAAK,EAAEC,QAAQ,KAAK;EACnD,MAAM;IAACC;EAAI,CAAC,GAAG,MAAMT,KAAK,CAACe,IAAI,CAAC,OAAO,EAAE;IAACR,KAAK;IAAEC;EAAQ,CAAC,CAAC;EAC3D,IAAGC,IAAI,CAAC,CAAC,CAAC,KAAK,IAAI,EAAE;IACpBS,YAAY,CAACC,OAAO,CAAC,OAAO,EAAEV,IAAI,CAAC,CAAC,CAAC,CAACQ,KAAK,CAAC;IAC5C,OAAO,IAAI;EACZ,CAAC,MAAI;IACJJ,KAAK,CAAC,gCAAgC,CAAC;IACvC,OAAO,KAAK;EACb;AACD,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}