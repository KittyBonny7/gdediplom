{"ast":null,"code":"import axios from \"axios\";\nimport jwtDecode from \"jwt-decode\";\nimport { serverPort } from \"../const\";\nconst $host = axios.create({\n  baseURL: serverPort\n});\nexport const registration = async (name, surname, email, login, password) => {\n  // Проверка уникальности логина и почты\n  const {\n    data: existingUsers\n  } = await $host.get(\"/users\", {\n    params: {\n      login,\n      email\n    }\n  });\n  if (existingUsers.length > 0) {\n    alert(\"Пользователь с такой почтой или логином уже зарегистрирован\");\n    return;\n  }\n\n  // Регистрация пользователя\n  localStorage.setItem(\"token\", data[1].token);\n  return jwtDecode(data.token);\n};\n\n// export const registration = async (name, surname, email, login, password) => {\n// \tconst {data} = await $host.post(\"/registration\", {name, surname, email, login, password})\n// \tif(data[0] === true) {\n// \t\tlocalStorage.setItem(\"token\", data[1].token)\n// \t\treturn jwtDecode(data[1].token)\n// \t}else{\n// \t\talert(\"Пользователь с такой почтой или логином уже зарегистрирован\")\n// \t}\n// }\n\nexport const authUser = async (login, password) => {\n  const {\n    data\n  } = await $host.post(\"/auth\", {\n    login,\n    password\n  });\n  if (data[0] === true) {\n    localStorage.setItem(\"token\", data[1].token);\n    return true;\n  } else {\n    alert(\"Не правильный логин или пароль\");\n    return false;\n  }\n};","map":{"version":3,"names":["axios","jwtDecode","serverPort","$host","create","baseURL","registration","name","surname","email","login","password","data","existingUsers","get","params","length","alert","localStorage","setItem","token","authUser","post"],"sources":["C:/Users/KittyBonny/Documents/GitHub/Diplom/client/src/queries/mainQuery.js"],"sourcesContent":["import axios from \"axios\"\nimport jwtDecode from \"jwt-decode\"\nimport { serverPort } from \"../const\"\n\nconst $host = axios.create({\n\tbaseURL: serverPort\n})\n\n\nexport const registration = async (name, surname, email, login, password) => {\n\t// Проверка уникальности логина и почты\n\tconst { data: existingUsers } = await $host.get(\"/users\", {\n\t  params: { login, email },\n\t});\n  \n\tif (existingUsers.length > 0) {\n\t  alert(\"Пользователь с такой почтой или логином уже зарегистрирован\");\n\t  return;\n\t}\n  \n\t// Регистрация пользователя\n\tlocalStorage.setItem(\"token\", data[1].token)\n\treturn jwtDecode(data.token)\n  };\n\n  \n\n// export const registration = async (name, surname, email, login, password) => {\n// \tconst {data} = await $host.post(\"/registration\", {name, surname, email, login, password})\n// \tif(data[0] === true) {\n// \t\tlocalStorage.setItem(\"token\", data[1].token)\n// \t\treturn jwtDecode(data[1].token)\n// \t}else{\n// \t\talert(\"Пользователь с такой почтой или логином уже зарегистрирован\")\n// \t}\n// }\n\n\nexport const authUser =  async (login, password) => {\n\tconst {data} = await $host.post(\"/auth\", {login, password})\n\tif(data[0] === true) {\n\t\tlocalStorage.setItem(\"token\", data[1].token)\n\t\treturn true\n\t}else{\n\t\talert(\"Не правильный логин или пароль\")\n\t\treturn false\n\t}\n}"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,OAAOC,SAAS,MAAM,YAAY;AAClC,SAASC,UAAU,QAAQ,UAAU;AAErC,MAAMC,KAAK,GAAGH,KAAK,CAACI,MAAM,CAAC;EAC1BC,OAAO,EAAEH;AACV,CAAC,CAAC;AAGF,OAAO,MAAMI,YAAY,GAAG,MAAAA,CAAOC,IAAI,EAAEC,OAAO,EAAEC,KAAK,EAAEC,KAAK,EAAEC,QAAQ,KAAK;EAC5E;EACA,MAAM;IAAEC,IAAI,EAAEC;EAAc,CAAC,GAAG,MAAMV,KAAK,CAACW,GAAG,CAAC,QAAQ,EAAE;IACxDC,MAAM,EAAE;MAAEL,KAAK;MAAED;IAAM;EACzB,CAAC,CAAC;EAEF,IAAII,aAAa,CAACG,MAAM,GAAG,CAAC,EAAE;IAC5BC,KAAK,CAAC,6DAA6D,CAAC;IACpE;EACF;;EAEA;EACAC,YAAY,CAACC,OAAO,CAAC,OAAO,EAAEP,IAAI,CAAC,CAAC,CAAC,CAACQ,KAAK,CAAC;EAC5C,OAAOnB,SAAS,CAACW,IAAI,CAACQ,KAAK,CAAC;AAC3B,CAAC;;AAIH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA,OAAO,MAAMC,QAAQ,GAAI,MAAAA,CAAOX,KAAK,EAAEC,QAAQ,KAAK;EACnD,MAAM;IAACC;EAAI,CAAC,GAAG,MAAMT,KAAK,CAACmB,IAAI,CAAC,OAAO,EAAE;IAACZ,KAAK;IAAEC;EAAQ,CAAC,CAAC;EAC3D,IAAGC,IAAI,CAAC,CAAC,CAAC,KAAK,IAAI,EAAE;IACpBM,YAAY,CAACC,OAAO,CAAC,OAAO,EAAEP,IAAI,CAAC,CAAC,CAAC,CAACQ,KAAK,CAAC;IAC5C,OAAO,IAAI;EACZ,CAAC,MAAI;IACJH,KAAK,CAAC,gCAAgC,CAAC;IACvC,OAAO,KAAK;EACb;AACD,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}